using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using NLog;
using RecursosHumanos.Data;
using RecursosHumanos.Models;

namespace RecursosHumanos.Controller
{
    public class PuestoController
    {
        private static readonly Logger _logger = LogManager.GetLogger("RecursosHumanos.Controller.PuestoController");
        private readonly PuestoDataAccess _puestoDataAccess;

        public PuestoController()
        {
            try
            {
                _puestoDataAccess = new PuestoDataAccess();
            }
            catch (Exception ex)
            {
                _logger.Error(ex, "Error al crear la conexión a la base de datos");
                throw;
            }
        }

        public (int id, string mensaje) RegistrarPuesto(Puesto puesto)
        {
            try
            {
                int idPuesto = _puestoDataAccess.InsertarPuesto(puesto);
                if (idPuesto <= 0)
                    return (-4, "No se pudo registrar el puesto en la base de datos.");

                _logger.Info($"Puesto registrado exitosamente con ID: {idPuesto}");
                return (idPuesto, "Puesto registrado exitosamente");
            }
            catch (ArgumentException ex)
            {
                _logger.Warn($"Error de validación al registrar el puesto: {ex.Message}");
                return (-1, ex.Message);
            }
            catch (InvalidOperationException ex)
            {
                _logger.Warn($"Error de negocio al registrar el puesto: {ex.Message}");
                return (-2, ex.Message);
            }
            catch (Exception ex)
            {
                return (-5, $"Error inesperado: {ex.Message}");
            }
        }

        public Puesto? ObtenerDetallePuesto(int idPuesto)
        {
            try
            {
                _logger.Debug($"Solicitando detalle del puesto con ID: {idPuesto}");
                return _puestoDataAccess.ObtenerPuestoPorId(idPuesto);
            }
            catch (Exception ex)
            {
                _logger.Error(ex, $"Error al obtener los detalles del puesto con ID: {idPuesto}");
                throw;
            }
        }

        public (bool exito, string mensaje) ActualizarPuesto(Puesto puesto)
        {
            try
            {
                if (puesto == null)
                {
                    return (false, "No se proporcionaron datos del puesto");
                }

                Puesto? puestoExistente = _puestoDataAccess.ObtenerPuestoPorId(puesto.IdPuesto);
                if (puestoExistente == null)
                {
                    return (false, $"No se encontró el puesto con ID {puesto.IdPuesto}");
                }

                _logger.Info($"Actualizando puesto con ID: {puesto.IdPuesto}");

                bool resultado = _puestoDataAccess.ActualizarPuesto(puesto);

                if (!resultado)
                {
                    _logger.Error($"Error al actualizar el puesto con ID {puesto.IdPuesto}");
                    return (false, "Error al actualizar el puesto en la base de datos");
                }

                _logger.Info($"Puesto con ID {puesto.IdPuesto} actualizado exitosamente");
                return (true, "Puesto actualizado exitosamente");
            }
            catch (Exception ex)
            {
                _logger.Error(ex, $"Error inesperado al actualizar puesto con ID: {puesto.IdPuesto}");
                return (false, "Error inesperado al actualizar el puesto");
            }
        }
        public List<Puesto> ObtenerTodosLosPuestos(bool soloActivos = true)
        {
            try
            {
                var puestos = _puestoDataAccess.ObtenerTodosLosPuestos(soloActivos);
                if (puestos == null)
                {
                    _logger.Error("ObtenerTodosLosPuestos retornó null");
                    return new List<Puesto>(); // Retornar una lista vacía en lugar de null
                }
                _logger.Info($"Se obtuvieron {puestos.Count} puestos correctamente");
                return puestos;
            }
            catch (Exception ex)
            {
                _logger.Error(ex, "Error al obtener la lista de puestos");
                throw;
            }
        }
    }
}
